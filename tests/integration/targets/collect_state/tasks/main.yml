---
- name: Collect state
  collect_state:
    directories:
      - path: '{{ output_dir }}'
    files:
      - path: '{{ output_dir }}/non-existing'
        allow_not_existing: true
  register: result

- name: Collect state (fail because of non-existing file)
  collect_state:
    files:
      - path: '{{ output_dir }}/non-existing'
        allow_not_existing: false
  register: result_f
  ignore_errors: true

- name: Check that collection failed
  assert:
    that:
      - result_f is failed
      - result_f.msg == 'The file "' ~ output_dir ~ '/non-existing" does not exist'

- name: Check state
  check_state:
    state: '{{ result.state }}'
    fail_on_diffs: true
  register: result_1

- name: Check state (provide result instead of result.state)
  check_state:
    state: '{{ result }}'
    fail_on_diffs: true
  register: result_2

- name: Check state (invalid data)
  check_state:
    state:
      foo: bar
  register: result_3
  ignore_errors: true

- name: Check that no changes were found
  assert:
    that:
      - result_1 is not changed
      - result_1.added_files == []
      - result_1.removed_files == []
      - result_1.changed_files == []
      - result_1.added_dirs == []
      - result_1.removed_dirs == []
      - result_1.changed_dirs == []
      - result_1.diff.prepared == ''
      - result_2 is not changed
      - result_2.added_files == []
      - result_2.removed_files == []
      - result_2.changed_files == []
      - result_2.added_dirs == []
      - result_2.removed_dirs == []
      - result_2.changed_dirs == []
      - result_2.diff.prepared == ''
      - result_3 is failed
      - result_3.msg == 'The value of the state parameter must be the result of community.internal_test_tools.collect_state'

- name: Create file
  copy:
    dest: '{{ output_dir }}/test'
    content: |
      This is
      a
      test file
      with five lines
      .

- name: Create file 2
  copy:
    dest: '{{ output_dir }}/attributes'
    content: Test file
    mode: '0644'

- name: Create file 3
  copy:
    dest: '{{ output_dir }}/removed_file'
    content: This will be removed.

- name: Create symlinks
  file:
    path: '{{ output_dir }}/{{ item }}'
    src: '{{ output_dir }}/test'
    state: link
  loop:
    - symlink
    - symlink_2

- name: Create directories
  file:
    path: '{{ output_dir }}/{{ item }}'
    state: directory
  loop:
    - dir
    - dir_2
    - dir_3

- name: Collect state
  collect_state:
    directories:
      - path: '{{ output_dir }}'
        check_content: false
  register: result

- name: Collect state (with content)
  collect_state:
    directories:
      - path: '{{ output_dir }}'
        check_content: true
    files:
      - path: '{{ output_dir }}/new_file'
        allow_not_existing: true
  register: result_content

- name: Collect state (not recursive)
  collect_state:
    directories:
      - path: '{{ output_dir }}'
        check_content: false
        recursive: false
  register: result_nonrecursive

- name: Change file
  copy:
    dest: '{{ output_dir }}/test'
    content: |-
      This is a
      test file
      with three lines.

- name: Change file 2
  file:
    path: '{{ output_dir }}/attributes'
    mode: '0700'

- name: Remove file 3
  file:
    path: '{{ output_dir }}/removed_file'
    state: absent

- name: Add file 4
  copy:
    dest: '{{ output_dir }}/new_file'
    content: New file

- name: Add file 5
  copy:
    dest: '{{ output_dir }}/dir/new_subdir_file'
    content: New file

- name: Update symlink
  file:
    path: '{{ output_dir }}/symlink'
    src: '{{ output_dir }}/attributes'
    state: link

- name: Replace symlink 2 with directory (1/2)
  file:
    path: '{{ output_dir }}/symlink_2'
    state: absent

- name: Replace symlink 2 with directory (2/2)
  file:
    path: '{{ output_dir }}/symlink_2'
    state: directory

- name: Create subdirectory
  file:
    path: '{{ output_dir }}/dir/subdir'
    state: directory

- name: Remove directory
  file:
    path: '{{ output_dir }}/dir_2'
    state: absent

- name: Check state
  check_state:
    state: '{{ result.state }}'
  register: result_1
  diff: true

- name: Check that the correct changes were found (1/4)
  assert:
    that:
      - result_1 is changed
      - result_1.added_files == [output_dir ~ '/dir/new_subdir_file', output_dir ~ '/new_file']
      - result_1.removed_files == [output_dir ~ '/removed_file']
      - result_1.changed_files == [output_dir ~ '/attributes', output_dir ~ '/symlink', output_dir ~ '/symlink_2', output_dir ~ '/test']
      - result_1.added_dirs == [output_dir ~ '/dir/subdir', output_dir ~ '/symlink_2']
      - result_1.removed_dirs == [output_dir ~ '/dir_2']
      - result_1.changed_dirs == [output_dir, output_dir ~ '/dir']

- name: Check state (with content)
  check_state:
    state: '{{ result_content.state }}'
  register: result_2
  diff: true

- name: Check that the correct changes were found (2/4)
  assert:
    that:
      - result_2 is changed
      - result_2.added_files == [output_dir ~ '/dir/new_subdir_file', output_dir ~ '/new_file']
      - result_2.removed_files == [output_dir ~ '/removed_file']
      - result_2.changed_files == [output_dir ~ '/attributes', output_dir ~ '/symlink', output_dir ~ '/symlink_2', output_dir ~ '/test']
      - result_2.added_dirs == [output_dir ~ '/dir/subdir', output_dir ~ '/symlink_2']
      - result_2.removed_dirs == [output_dir ~ '/dir_2']
      - result_2.changed_dirs == [output_dir, output_dir ~ '/dir']

- name: Check state (with content, without diff)
  check_state:
    state: '{{ result_content.state }}'
  register: result_3
  diff: false

- name: Check that the correct changes were found (3/4)
  assert:
    that:
      - result_3 is changed
      - result_3.added_files == [output_dir ~ '/dir/new_subdir_file', output_dir ~ '/new_file']
      - result_3.removed_files == [output_dir ~ '/removed_file']
      - result_3.changed_files == [output_dir ~ '/attributes', output_dir ~ '/symlink', output_dir ~ '/symlink_2', output_dir ~ '/test']
      - result_3.added_dirs == [output_dir ~ '/dir/subdir', output_dir ~ '/symlink_2']
      - result_3.removed_dirs == [output_dir ~ '/dir_2']
      - result_3.changed_dirs == [output_dir, output_dir ~ '/dir']

- name: Check state (non-recursive)
  check_state:
    state: '{{ result_nonrecursive.state }}'
    fail_on_diffs: true
  register: result_4
  diff: true
  ignore_errors: true

- name: Check that the correct changes were found (4/4)
  assert:
    that:
      - result_4 is failed
      - result_4 is changed
      - result_4.msg == 'Found differences!'
      - result_4.added_files == [output_dir ~ '/new_file']
      - result_4.removed_files == [output_dir ~ '/removed_file']
      - result_4.changed_files == [output_dir ~ '/attributes', output_dir ~ '/symlink', output_dir ~ '/symlink_2', output_dir ~ '/test']
      - result_4.added_dirs == []
      - result_4.removed_dirs == []
      - result_4.changed_dirs == [output_dir]
